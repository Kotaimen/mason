'''
Created on May 21, 2012

@author: ray
'''
import os
import re
import tempfile
import subprocess

from .composer import TileComposer, TileComposerError


#==============================================================================
# ImageMagick Composer
#==============================================================================
class ImageMagickComposer(TileComposer):

    """ ImageMagick Composer

    Compose tiles with ImageMagick tools according to the
    specified command.

    Image Source is designated as '$n', n starts from 1,
    eg.'$1','$2'.

    Image output should not be specified, since that will
    be deduced from the image_type by the composer.

    Samples:
        command = 'convert $1 $2 -compose lighten -composite'

    the number of source corresponds with the order of the
    tiles passed into the compose method, which is also the order
    of the sources defined in the composer source.

    """

    def __init__(self, tag, command):
        TileComposer.__init__(self, tag)

        # output image should be sent to stdout(use '-')
        match = re.search('(\w+):-', command)
        if not match:
            raise TileComposerError('Output Image Type is missing.')

        # get image type from imagemagick command
        image_type = match.group(1)
        if image_type not in ['png', 'jpeg']:
            raise TileComposerError('Invalid Image Type "%s"' % image_type)

        self._command = command

    def compose(self, tiles):
        """ Composes tiles according to the command"""

        temp_files = list()

        def sourcerepl(match):
            try:
                tile = tiles[int(match.group(1)) - 1]
            except KeyError:
                TileComposerError('Tile sources and command not matches.')

            data = tile.data
            ext = tile.metadata['ext']

            with tempfile.NamedTemporaryFile(delete=False) as tempfp:
                name = tempfp.name
                tempfp.write(data)

            # File descriptor of temporary file generated by tempfile
            # is not inherited by child process, so we reopen it again
            # by os.open. Well, this is awkward...
            fd = os.open(name, os.O_RDONLY)
            temp_files.append(name)
            return '%s:fd:%d' % (ext, fd)

        # We set file descriptor as input source for imagemagick
        command = re.sub('\$(\d+)', sourcerepl, self._command).split()
        data, err = subprocess.Popen(command,
                                     stdin=subprocess.PIPE,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE,
                                     close_fds=False
                                     ).communicate()

        if err:
            print err.decode('utf8')

        for name in temp_files:
            os.remove(name)

        return data
